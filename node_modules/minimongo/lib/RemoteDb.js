var $, Collection, RemoteDb, createUid, _;

_ = require('lodash');

$ = require('jquery');

createUid = require('./utils').createUid;

module.exports = RemoteDb = (function() {
  function RemoteDb(url, client) {
    this.url = url;
    this.client = client;
    this.collections = {};
  }

  RemoteDb.prototype.addCollection = function(name) {
    var collection;
    collection = new Collection(name, this.url + name, this.client);
    this[name] = collection;
    return this.collections[name] = collection;
  };

  RemoteDb.prototype.removeCollection = function(name) {
    delete this[name];
    return delete this.collections[name];
  };

  return RemoteDb;

})();

Collection = (function() {
  function Collection(name, url, client) {
    this.name = name;
    this.url = url;
    this.client = client;
  }

  Collection.prototype.find = function(selector, options) {
    if (options == null) {
      options = {};
    }
    return {
      fetch: (function(_this) {
        return function(success, error) {
          var params, req;
          params = {};
          if (options.sort) {
            params.sort = JSON.stringify(options.sort);
          }
          if (options.limit) {
            params.limit = options.limit;
          }
          if (options.fields) {
            params.fields = JSON.stringify(options.fields);
          }
          if (_this.client) {
            params.client = _this.client;
          }
          params.selector = JSON.stringify(selector || {});
          if (navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {
            params._ = new Date().getTime();
          }
          req = $.getJSON(_this.url, params);
          req.done(function(data, textStatus, jqXHR) {
            return success(data);
          });
          return req.fail(function(jqXHR, textStatus, errorThrown) {
            if (error) {
              return error(jqXHR);
            }
          });
        };
      })(this)
    };
  };

  Collection.prototype.findOne = function(selector, options, success, error) {
    var params, req, _ref;
    if (options == null) {
      options = {};
    }
    if (_.isFunction(options)) {
      _ref = [{}, options, success], options = _ref[0], success = _ref[1], error = _ref[2];
    }
    params = {};
    if (options.sort) {
      params.sort = JSON.stringify(options.sort);
    }
    params.limit = 1;
    if (this.client) {
      params.client = this.client;
    }
    params.selector = JSON.stringify(selector || {});
    if (navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {
      params._ = new Date().getTime();
    }
    req = $.getJSON(this.url, params);
    req.done((function(_this) {
      return function(data, textStatus, jqXHR) {
        return success(data[0] || null);
      };
    })(this));
    return req.fail((function(_this) {
      return function(jqXHR, textStatus, errorThrown) {
        if (error) {
          return error(jqXHR);
        }
      };
    })(this));
  };

  Collection.prototype.upsert = function(doc, success, error) {
    var req, url;
    if (!this.client) {
      throw new Error("Client required to upsert");
    }
    if (!doc._id) {
      doc._id = createUid();
    }
    if (navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {
      url = this.url + "?client=" + this.client + "&_=" + new Date().getTime();
    } else {
      url = this.url + "?client=" + this.client;
    }
    req = $.ajax(url, {
      data: JSON.stringify(doc),
      contentType: 'application/json',
      type: 'POST'
    });
    req.done((function(_this) {
      return function(data, textStatus, jqXHR) {
        return success(data || null);
      };
    })(this));
    return req.fail((function(_this) {
      return function(jqXHR, textStatus, errorThrown) {
        if (error) {
          return error(jqXHR);
        }
      };
    })(this));
  };

  Collection.prototype.remove = function(id, success, error) {
    var req;
    if (!this.client) {
      throw new Error("Client required to remove");
    }
    req = $.ajax(this.url + "/" + id + "?client=" + this.client, {
      type: 'DELETE'
    });
    req.done((function(_this) {
      return function(data, textStatus, jqXHR) {
        return success();
      };
    })(this));
    return req.fail((function(_this) {
      return function(jqXHR, textStatus, errorThrown) {
        if (jqXHR.status === 410) {
          return success();
        } else if (error) {
          return error(jqXHR);
        }
      };
    })(this));
  };

  return Collection;

})();
